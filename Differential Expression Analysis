
								#R-Scripts

##### Differential Expression Analysis with DESeq2

# Loading libraries
library(DESeq2)		
library(ggplot2)		
library(edgeR)		
library(readODS)		
library(limma)		
library(RColorBrewer)		
library(gplots)		
library(apeglm)		
library(dplyr)		
library(calibrate)		
library(pheatmap)		
library(vsn)		
		
# Importing the input files: "design table" and "count table"
#count table: gene expression matrix having genes as rows and samples as columns
#design table: table containing variables related to our samples
dt<-read.csv("design_table.csv",header=TRUE,sep=",")		
ct<-read.csv("count_table.csv",header=TRUE,sep=",")		
str(df)
str(ct)
ct<-as.matrix(ct)		
	
# Constructing the DESeqDataSet object
# "design" option must be provided with the name of the design variable name (from the design table)
dds<-DESeqDataSetFromMatrix(countData=ct,colData=dt,design=~Pheno)		

# Visualizing the design of the experiment and eventually change its levels
dds$Pheno
dds$Pheno<-factor(dds$Pheno,levels=c("control","treated")) #control = reference	

# DESeq2 can test 3 negative binomial model types: Parametric, Local and Mean. By plotting each of them it is possible to detect the best one
dds<-DESeq(dds,fitType="parametric/local/mean")
plotDispEsts(dds)
resultsNames(dds)
boxplot(log10(counts(dds)+1),las=2)		
boxplot(log10(counts(dds,normalized=TRUE)+1),las=2)

# Differential expression analysis using the apeglm method
resLFC <- lfcShrink(dds,coef="condition name",type="apeglm")
View(resLFC)
summary(resLFC)
sum(resLFC$padj<0.05,na.rm=TRUE)#number of genes with a pvalue below 0.05 (differential expressed genes)
# Volcano plot and MA plot can be useful plots to generate to explore the results

# Clustering analyses (pheatmap, pca and dendogram) to check for samples similarity and detect outliers
vsd <- vst(dds, blind=TRUE)# variance-stabilizing transformation 
assay(vsd[,])
sampleDists <- dist(t(assay(vsd)))		
sampleDistMatrix <- as.matrix(sampleDists)		
rownames(sampleDistMatrix) <- paste(vsd$Pheno, vsd$ID,sep="-")
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)		
pheatmap(sampleDistMatrix,		
         clustering_distance_rows=sampleDists,		
         clustering_distance_cols=sampleDists,		
         col=colors)		
plotPCA(vsd, intgroup=c("Pheno", "ID"))		
plot(hclust(sampleDists))		
